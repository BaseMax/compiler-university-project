/*
Productions leading up to the conflict state found.  Still finding a possible unifying counterexample...time limit exceeded: 6.000000
  First example: elem1 • AND elem2 AND logical_exp COMMANDEND
  Shift derivation
    condition
    ↳ logical_exp           AND logical_exp COMMANDEND
      ↳ elem1
        ↳ elem1 • AND elem2
  Second example: elem1 • AND elem2 COMMANDEND
  Reduce derivation
    condition
    ↳ logical_exp AND elem2 COMMANDEND
      ↳ elem1 •
parser.y: warning: reduce/reduce conflict on token OR [-Wcounterexamples]
  Example: EITHER logical_exp OR elem1 • OR elem1 COMMANDEND
  First reduce derivation
    condition
    ↳ EITHER logical_exp              OR logical_exp COMMANDEND
             ↳ logical_exp OR elem1 •    ↳ elem1
  Example: EITHER logical_exp OR elem1 • OR elem1 COMMANDEND
  Second reduce derivation
    condition
    ↳ EITHER logical_exp OR logical_exp            COMMANDEND
                            ↳ logical_exp OR elem1
                              ↳ elem1 •

*/
condition: EITHER logical_exp OR logical_exp COMMANDEND {
		$$ = sdsnew($1);
		$$ = sdscat($$, " OR ");
		$$ = sdscat($$, $3);
	}
	| NEITHER logical_exp NOR logical_exp COMMANDEND {
		$$ = sdsnew($1);
		$$ = sdscat($$, " NOR ");
		$$ = sdscat($$, $3);
	}
	| BOTH logical_exp AND logical_exp COMMANDEND {
		$$ = sdsnew($1);
		$$ = sdscat($$, " AND ");
		$$ = sdscat($$, $3);
	}
	;

cond1_stmt: EXECUTE SECTION_OPEN stmt_list_or_no SECTION_CLOSE condition {
		$$ = sdsnew("execute( ");
		$$ = sdscat($$, $5);
		$$ = sdscat($$, " ) {\n");
		$$ = sdscat($$, $3);
		$$ = sdscat($$, "}\n");
	}
	;

logical_exp: logical_exp OR elem1 {
		$$ = sdsnew($1);
		$$ = sdscat($$, " OR ");
		$$ = sdscat($$, $3);
	}
	| elem1 {
		$$ = sdsnew($1);
	}
	;

elem1: elem1 AND elem2 {
		$$ = sdsnew($1);
		$$ = sdscat($$, " AND ");
		$$ = sdscat($$, $3);
	}
	| elem2 {
		$$ = sdsnew($1);
	}
	;

elem2: NOT elem2 {
		$$ = sdsnew("NOT ");
		$$ = sdscat($$, $2);
	}
	| elem3 {
		$$ = sdsnew($1);
	}
	;

elem3: LEFTPAREN logical_exp RIGHTPAREN {
		$$ = sdsnew("( ");
		$$ = sdscat($$, $2);
		$$ = sdscat($$, " )");
	}
	| rel_exp {
		$$ = sdsnew($1);
	}
	;


rel_exp: t1 rel_op t1 {
		$$ = sdsnew($1);
		$$ = sdscat($$, " ");
		$$ = sdscat($$, $2);
		$$ = sdscat($$, " ");
		$$ = sdscat($$, $3);
	}
	;

t1: math_exp {
		$$ = sdsnew($1);
	}
	;

rel_op: LT {
		$$ = sdsnew("<");
	}
	| LE {
		$$ = sdsnew("<=");
	}
	| GT {
		$$ = sdsnew(">");
	}
	| GE {
		$$ = sdsnew(">=");
	}
	| NE {
		$$ = sdsnew("!=");
	}
	| EQ {
		$$ = sdsnew("==");
	}
	;

math_exp: math_exp ADD term {
		$$ = sdsnew($1);
		$$ = sdscat($$, " + ");
		$$ = sdscat($$, $3);
	}
	| math_exp SUB term {
		$$ = sdsnew($1);
		$$ = sdscat($$, " - ");
		$$ = sdscat($$, $3);
	}
	| term {
		$$ = sdsnew($1);
	}
	;

term: term MUL factor {
		$$ = sdsnew($1);
		$$ = sdscat($$, " * ");
		$$ = sdscat($$, $3);
	}
	| term DIVISION factor {
		$$ = sdsnew($1);
		$$ = sdscat($$, " / ");
		$$ = sdscat($$, $3);
	}
	| factor {
		$$ = $1;
	}
	;

factor: SUB factor {
		$$ = sdsnew("-");
		$$ = sdscat($$, $2);
	}
	| element {
		$$ = sdsnew($1);
	}
	;

element: LEFTPAREN math_exp RIGHTPAREN {
		$$ = sdsnew("(");
		$$ = sdscat($$, $2);
		$$ = sdscat($$, ")");
	}
	| ID {
		$$ = sdsnew($1);
	}
	| NUMBER {
		$$ = sdsnew($1);
	}
	| STRING {
		$$ = sdsnew($1);
	}
	;
